version: '3.8'

services:
  # ===========================================
  # NGINX (REVERSE PROXY)
  # ===========================================
  nginx:
    image: nginx:alpine
    container_name: meulink-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./dist:/usr/share/nginx/html:ro
    depends_on:
      - backend
      - payments
      - link-ai
      - biolink
    restart: unless-stopped
    networks:
      - meulink-network

  # ===========================================
  # BACKEND PRINCIPAL
  # ===========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: meulink-backend
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${MAIN_DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "3001:3001"
    restart: unless-stopped
    networks:
      - meulink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # MICROSERVIÇO DE PAGAMENTOS
  # ===========================================
  payments:
    build:
      context: ./microservices/payments
      dockerfile: Dockerfile
    container_name: meulink-payments
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DATABASE_URL=${PAYMENTS_DATABASE_URL}
      - MAIN_DATABASE_URL=${MAIN_DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - EFI_SANDBOX=false
      - EFI_CLIENT_ID=${EFI_CLIENT_ID}
      - EFI_CLIENT_SECRET=${EFI_CLIENT_SECRET}
      - EFI_PIX_KEY=${EFI_PIX_KEY}
      - EFI_PAYEE_CODE=${EFI_PAYEE_CODE}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
    ports:
      - "3004:3004"
    volumes:
      - ./microservices/payments/certificates:/app/certificates:ro
    restart: unless-stopped
    networks:
      - meulink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # MICROSERVIÇO LINK AI
  # ===========================================
  link-ai:
    build:
      context: ./microservices/link-ai
      dockerfile: Dockerfile
    container_name: meulink-link-ai
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=${LINK_AI_DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    ports:
      - "3002:3002"
    restart: unless-stopped
    networks:
      - meulink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # MICROSERVIÇO BIOLINK
  # ===========================================
  biolink:
    build:
      context: ./microservices/biolink
      dockerfile: Dockerfile
    container_name: meulink-biolink
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DATABASE_URL=${BIOLINK_DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "3003:3003"
    restart: unless-stopped
    networks:
      - meulink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # REDIS (CACHE)
  # ===========================================
  redis:
    image: redis:alpine
    container_name: meulink-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - meulink-network
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # MONITORAMENTO (OPCIONAL)
  # ===========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: meulink-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - meulink-network

  grafana:
    image: grafana/grafana:latest
    container_name: meulink-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - meulink-network

networks:
  meulink-network:
    driver: bridge

volumes:
  redis-data:
  grafana-data:
