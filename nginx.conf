# Configuração Nginx Otimizada para Microserviços
# Use: sudo ln -s /home/leonardo/Documentos/meulink/nginx.conf /etc/nginx/sites-available/meulink
#      sudo ln -s /etc/nginx/sites-available/meulink /etc/nginx/sites-enabled/
#      sudo nginx -t && sudo systemctl reload nginx

upstream frontend {
    server localhost:8080 max_fails=3 fail_timeout=30s;
}

upstream backend_api {
    server snnap-api.onrender.com:443 max_fails=3 fail_timeout=30s;
}

upstream link_ai_service {
    server snnap-ai.onrender.com:443 max_fails=3 fail_timeout=30s;
}

upstream biolink_service {
    server localhost:3003 max_fails=3 fail_timeout=30s;
}

upstream payments_service {
    server snnap-pay.onrender.com:443 max_fails=3 fail_timeout=30s;
}

# Cache zone para páginas SSR
proxy_cache_path /var/cache/nginx/ai_pages 
    levels=1:2 
    keys_zone=ai_pages_cache:10m 
    max_size=100m 
    inactive=60m 
    use_temp_path=off;

# Cache zone para biolinks
proxy_cache_path /var/cache/nginx/biolinks 
    levels=1:2 
    keys_zone=biolinks_cache:10m 
    max_size=100m 
    inactive=60m 
    use_temp_path=off;

server {
    listen 80;
    server_name meulink.lat www.meulink.lat;

    # Logs
    access_log /var/log/nginx/meulink_access.log combined;
    error_log /var/log/nginx/meulink_error.log warn;

    # Configurações gerais
    client_max_body_size 50M;
    client_body_timeout 30s;
    keepalive_timeout 65s;

    # Compressão
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types 
        text/plain 
        text/css 
        text/xml 
        text/javascript 
        application/json 
        application/javascript 
        application/xml+rss 
        application/x-javascript;

    # Headers de segurança globais
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # ========================================
    # ROTAS DA API - Backend Principal
    # ========================================
    # Rota específica para API de biolinks (microserviço)
    location /api/biolinks {
        proxy_pass http://biolink_service/api/biolinks;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Rotas de pagamentos (microserviço - RENDER)
    location /api/payments {
        proxy_pass https://snnap-pay.onrender.com/api;
        proxy_http_version 1.1;
        proxy_set_header Host snnap-pay.onrender.com;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        
        # Timeout maior para operações de pagamento
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
        proxy_send_timeout 300s;
    }

    # Rotas específicas de pagamento (RENDER)
    location /api/pix {
        proxy_pass https://snnap-pay.onrender.com/api/pix;
        proxy_http_version 1.1;
        proxy_set_header Host snnap-pay.onrender.com;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
    }

    location /api/card {
        proxy_pass https://snnap-pay.onrender.com/api/card;
        proxy_http_version 1.1;
        proxy_set_header Host snnap-pay.onrender.com;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
    }

    location /api/subscriptions {
        proxy_pass https://snnap-pay.onrender.com/api/subscriptions;
        proxy_http_version 1.1;
        proxy_set_header Host snnap-pay.onrender.com;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
    }

    # Rotas gerais da API (backend principal - RENDER)
    location /api/ {
        proxy_pass https://snnap-api.onrender.com/api/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host snnap-api.onrender.com;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_cache_bypass $http_upgrade;
        
        # Timeout maior para operações de IA e uploads
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
        proxy_send_timeout 300s;
    }

    # ========================================
    # MÉTRICAS E HEALTH CHECKS
    # ========================================
    location /health/link-ai {
        proxy_pass https://snnap-ai.onrender.com/health;
        proxy_http_version 1.1;
        proxy_set_header Host snnap-ai.onrender.com;
        access_log off;
    }

    location /health/biolink {
        proxy_pass http://biolink_service/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        access_log off;
    }

    location /health/payments {
        proxy_pass https://snnap-pay.onrender.com/health;
        proxy_http_version 1.1;
        proxy_set_header Host snnap-pay.onrender.com;
        access_log off;
    }

    location /metrics/link-ai {
        proxy_pass https://snnap-ai.onrender.com/metrics;
        proxy_http_version 1.1;
        proxy_set_header Host snnap-ai.onrender.com;
        
        # Proteger métricas (opcional - adicione autenticação básica)
        # auth_basic "Metrics";
        # auth_basic_user_file /etc/nginx/.htpasswd;
    }

    location /metrics/biolink {
        proxy_pass http://biolink_service/metrics;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        
        # Proteger métricas (opcional - adicione autenticação básica)
        # auth_basic "Metrics";
        # auth_basic_user_file /etc/nginx/.htpasswd;
    }

    location /metrics/payments {
        proxy_pass https://snnap-pay.onrender.com/metrics;
        proxy_http_version 1.1;
        proxy_set_header Host snnap-pay.onrender.com;
        
        # Proteger métricas (opcional - adicione autenticação básica)
        # auth_basic "Metrics";
        # auth_basic_user_file /etc/nginx/.htpasswd;
    }

    # ========================================
    # ASSETS ESTÁTICOS - Frontend
    # ========================================
    location ~ ^/(assets|static|vite|node_modules)/ {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        
        # Cache agressivo para assets
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }

    # Favicon e arquivos especiais
    location ~ ^/(favicon\.ico|robots\.txt|sitemap\.xml|manifest\.json) {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        expires 7d;
        add_header Cache-Control "public";
        access_log off;
    }

    # ========================================
    # ROTAS DO FRONTEND (SPA)
    # ========================================
    location ~ ^/(login|dashboard|admin|link-ai|biolinks|biolink|auth) {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # ========================================
    # WEBHOOKS EFÍ - PRIORIDADE! (RENDER)
    # ========================================
    location /webhooks/efi {
        proxy_pass https://snnap-pay.onrender.com/webhooks/efi;
        proxy_http_version 1.1;
        proxy_set_header Host snnap-pay.onrender.com;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Sem cache para webhooks
        proxy_cache_bypass 1;
        proxy_no_cache 1;
    }

    # ========================================
    # BIOLINKS E PÁGINAS DE IA (SSR) - PRIORIDADE!
    # ========================================
    # Qualquer slug que não seja rota do frontend
    location ~ ^/[a-z0-9][a-z0-9-]*[a-z0-9]$ {
        # Tentar servir do microserviço Biolink primeiro
        proxy_pass http://biolink_service;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache de biolinks (usa Redis no microserviço)
        proxy_cache biolinks_cache;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        proxy_cache_valid 200 5m;
        proxy_cache_valid 404 1m;
        proxy_cache_bypass $http_cache_control $http_pragma;
        proxy_no_cache $http_pragma $http_authorization;
        add_header X-Nginx-Cache-Status $upstream_cache_status;
        
        # Se biolink retornar 404, tentar Link AI
        proxy_intercept_errors on;
        error_page 404 = @try_link_ai;
    }

    # Fallback 1: tentar Link AI se biolink retornar 404 (RENDER)
    location @try_link_ai {
        proxy_pass https://snnap-ai.onrender.com;
        proxy_http_version 1.1;
        proxy_set_header Host snnap-ai.onrender.com;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache de páginas AI
        proxy_cache ai_pages_cache;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        proxy_cache_valid 200 10m;
        proxy_cache_valid 404 1m;
        add_header X-Nginx-Cache-Status $upstream_cache_status;
        
        # Se AI também retornar 404, tentar frontend
        proxy_intercept_errors on;
        error_page 404 = @try_frontend;
    }

    # Fallback 2: tentar frontend se tudo mais falhar
    location @try_frontend {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # ========================================
    # RAIZ - Frontend
    # ========================================
    location = / {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # ========================================
    # FALLBACK GERAL
    # ========================================
    location / {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}

# Redirecionamento HTTP -> HTTPS (para produção)
# server {
#     listen 80;
#     server_name meulink.lat www.meulink.lat;
#     return 301 https://$server_name$request_uri;
# }

# Server HTTPS (para produção com SSL)
# server {
#     listen 443 ssl http2;
#     server_name meulink.lat www.meulink.lat;
#
#     # Certificados SSL (Let's Encrypt)
#     ssl_certificate /etc/letsencrypt/live/meulink.lat/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/meulink.lat/privkey.pem;
#     include /etc/letsencrypt/options-ssl-nginx.conf;
#     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
#
#     # ... copiar todas as locations acima ...
# }